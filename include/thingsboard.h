#ifndef THINGSBOARD_H
#define THINGSBOARD_H

#include <stdint.h>
#include <stddef.h>
#include <time.h>

#include <zephyr/net/tls_credentials.h>

#ifdef CONFIG_THINGSBOARD_CONTENT_FORMAT_JSON
#include <thingsboard_attributes_serde.h>
#include <thingsboard_telemetry_serde.h>
#else /* CONFIG_THINGSBOARD_CONTENT_FORMAT_JSON */
#include <thingsboard.pb.h>
#endif /* CONFIG_THINGSBOARD_CONTENT_FORMAT_JSON */

enum thingsboard_event {
	/**
	 * Thingsboard has just been provisioned.
	 *
	 * Will be issued after first connection to thingsboard instance.
	 */
	THINGSBOARD_EVENT_PROVISIONED,

	/**
	 * Thingsboard client became active. Will be issued when a connection
	 * to the thingsboard instance has just been established.
	 */
	THINGSBOARD_EVENT_ACTIVE,

	/**
	 * A time update from thingsboard has been received.
	 */
	THINGSBOARD_EVENT_TIME_UPDATE,
};

#ifdef CONFIG_THINGSBOARD_CONTENT_FORMAT_JSON

typedef struct thingsboard_attributes thingsboard_attributes;

typedef struct thingsboard_telemetry thingsboard_telemetry;

/**
 * One timeseries element. Used to attach a timestamp to a `thingsboard_telemetry` object.
 */
typedef struct thingsboard_timeseries {
	time_t ts;
	bool has_values;
	thingsboard_telemetry values;
} thingsboard_timeseries;
#endif

/**
 * This callback will be called when new shared attributes are
 * received from the Thingsboard server.
 * For information on how the struct thingsboard_attr is defined,
 * see top-level CMakeLists.txt and scripts/gen_json_parser.py.
 */
typedef void (*thingsboard_attributes_write_callback_t)(thingsboard_attributes *attr);

/**
 * This callback will be called on events generated by the Thingsboard client
 * library.
 * See `enum thingsboard_event` for more information about the events.
 */
typedef void (*thingsboard_event_callback_t)(enum thingsboard_event ev);

struct thingsboard_firmware_info {
	/** Title of your firmware, e.g. <project>-prod. This
	 * must match to what you configure on your thingsboard
	 * FOTA page.
	 */
	const char *title;

	/** Version of your firmware, e.g. 8b5ca79. This
	 * must match to what you configure on your thingsboard
	 * FOTA page.
	 */
	const char *version;
};

/**
 * Callbacks from Thingsboard SDK to application.
 *
 * The application may register callbacks here.
 */
struct thingsboard_callbacks {
	/**
	 * Callback being called on attribute updates.
	 *
	 * The Thingsboard SDK does not track the attributes and does not handle
	 * deletion of attributes.
	 */
	thingsboard_attributes_write_callback_t on_attributes_write;

	/**
	 * Callbacks being called on various events.
	 *
	 * See `enum thingsboard_event` for more details.
	 */
	thingsboard_event_callback_t on_event;
};

#ifdef CONFIG_THINGSBOARD_DTLS
/**
 * Security configuration.
 */
struct thingsboard_security_config {
	/**
	 * Array of security tags to be used. The application is expected to
	 * configure the CA certificate to validate the server certificate, as
	 * well as the client certificate and corresponting private key here.
	 *
	 * A good choice for key type is NIST P-256.
	 */
	sec_tag_t *tags;

	/**
	 * Size of the given tag array. This is not the length of the array, but
	 * it total size in chars, as returned by `sizeof()`.
	 */
	size_t tags_size;
};
#endif /* CONFIG_THINGSBOARD_DTLS */

struct thingsboard_configuration {
	/**
	 * Name of this device instance. For example the ICCID of the SIM-Card.
	 */
	const char *device_name;

	/**
	 * Hostname of Thingsboard instance to connect to. Also being used to
	 * validate the common name of the server certificate, when DTLS
	 * is being used.
	 */
	const char *server_hostname;

	/**
	 * UDP/CoAP port of Thingsboard instance to connect to.
	 *
	 * Usually 5683 without and 5684 with DTLS enabled.
	 */
	const uint16_t server_port;

	/**
	 * Current firmware information. Used to check for firmware updates.
	 */
	struct thingsboard_firmware_info current_firmware;

#ifdef CONFIG_THINGSBOARD_DTLS
	/**
	 * Security configuration.
	 */
	struct thingsboard_security_config security;
#endif /* CONFIG_THINGSBOARD_DTLS */

	/**
	 * Callbacks from Thingsboard SDK to application.
	 */
	struct thingsboard_callbacks callbacks;
};

#ifdef CONFIG_THINGSBOARD_TIME
/**
 * Return the current time in seconds.
 * Time is initially retreived from Thingsboard, given that your
 * rule chain supports it.
 * You can import the file root_rule_chain.json on your Thingsboard
 * instance to create a rule chain with the required D2C function.
 *
 * @return Current time in seconds.
 */
time_t thingsboard_time(void);

/**
 * Same as thingsboard_time, but the return value is not truncated to
 * seconds. Please be aware that no special care is taken to guarantee
 * the accuracy of the time. Due to network latency, the time will
 * be off in the order of multiple seconds.
 *
 * @return Current time in milliseconds.
 */
time_t thingsboard_time_msec(void);
#endif /* CONFIG_THINGSBOARD_TIME */

/**
 * Send telemetry.
 *
 * See https://thingsboard.io/docs/user-guide/telemetry/ for details.
 * If you provide your own timestamp, be aware that Thingsboard expects
 * timestamps with millisecond-precision as provided by thingsboard_time_msec.
 *
 * @param payload Pointer to byte array to be send to Thingsboard.
 * @param sz Length of `payload` in bytes
 *
 * @return 0 on success, negative on error
 */
int thingsboard_send_telemetry_buf(const void *payload, size_t sz);

/**
 * Serialize and send telemetry without timestamp.
 * See https://thingsboard.io/docs/user-guide/telemetry/ for details.
 *
 * @param telemetry Pointer of `thingsboard_telemetry` object to be send
 *
 * @return 0 on success, negative on error
 */
int thingsboard_send_telemetry(const thingsboard_telemetry *telemetry);

/**
 * Serialize and send timeseries, which is multiple telemetry object with
 * timestamps attached.
 *
 * Data might be sent in multiple messages.
 *
 * Be aware that Thingsboard expects timestamps with millisecond-precision,
 * as provided by `thingsboard_time_msec()`.
 *
 * See https://thingsboard.io/docs/user-guide/telemetry/ for details.
 *
 * @param ts array of `thingsboard_timeseries` to be send to Thingsboard
 * @param ts_count amount of `thingsboard_timeseries` objects in `ts`
 *
 * @return 0 on success, negative on error
 */
int thingsboard_send_timeseries(const thingsboard_timeseries *ts, size_t ts_count);

/**
 * Lock Thingsboard SDKs internal lock.
 */
void thingsboard_lock(void);

/**
 * Unlock Thingsboard SDKs internal lock.
 */
void thingsboard_unlock(void);

/**
 * Get the current state of shared attributes.
 *
 * This exposes the internal structure tracking the shared attributes. To avoid
 * data races, lock the the Thingsboard internal lock using `thingsboard_lock()`
 * before calling this function and unlock it using `thingsboard_unlock()`, after
 * all data has been read.
 */
const thingsboard_attributes *thingsboard_get_attributes(void);

/**
 * Initialize the Thingsboard library.
 *
 * This function should be called, after the network connection is up.
 *
 * This function should only be called once. The pointer to the
 * `thingsboard_configuration` object is stored internally, the memory is not
 * copied. Do not change the contents later.
 *
 * @param configuration Thingsboard SDK configuration.
 *
 * @return 0 on success, negative on error
 */
int thingsboard_init(const struct thingsboard_configuration *configuration);

#endif
